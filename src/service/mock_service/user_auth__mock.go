// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/service/user_auth.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	thrid "github.com/teambition/urbs-console/src/dto/thrid"
	reflect "reflect"
)

// MockUserAuthInterface is a mock of UserAuthInterface interface
type MockUserAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthInterfaceMockRecorder
}

// MockUserAuthInterfaceMockRecorder is the mock recorder for MockUserAuthInterface
type MockUserAuthInterfaceMockRecorder struct {
	mock *MockUserAuthInterface
}

// NewMockUserAuthInterface creates a new mock instance
func NewMockUserAuthInterface(ctrl *gomock.Controller) *MockUserAuthInterface {
	mock := &MockUserAuthInterface{ctrl: ctrl}
	mock.recorder = &MockUserAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserAuthInterface) EXPECT() *MockUserAuthInterfaceMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockUserAuthInterface) Verify(ctx context.Context, body *thrid.UserVerifyReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockUserAuthInterfaceMockRecorder) Verify(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockUserAuthInterface)(nil).Verify), ctx, body)
}
