// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/service/urbs_setting_interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	urbssetting "github.com/teambition/urbs-console/src/dto/urbssetting"
	tpl "github.com/teambition/urbs-console/src/tpl"
	reflect "reflect"
)

// MockUrbsSettingInterface is a mock of UrbsSettingInterface interface
type MockUrbsSettingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUrbsSettingInterfaceMockRecorder
}

// MockUrbsSettingInterfaceMockRecorder is the mock recorder for MockUrbsSettingInterface
type MockUrbsSettingInterfaceMockRecorder struct {
	mock *MockUrbsSettingInterface
}

// NewMockUrbsSettingInterface creates a new mock instance
func NewMockUrbsSettingInterface(ctrl *gomock.Controller) *MockUrbsSettingInterface {
	mock := &MockUrbsSettingInterface{ctrl: ctrl}
	mock.recorder = &MockUrbsSettingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUrbsSettingInterface) EXPECT() *MockUrbsSettingInterfaceMockRecorder {
	return m.recorder
}

// ProductList mocks base method
func (m *MockUrbsSettingInterface) ProductList(ctx context.Context, args *tpl.Pagination) (*tpl.ProductsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductList", ctx, args)
	ret0, _ := ret[0].(*tpl.ProductsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductList indicates an expected call of ProductList
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductList), ctx, args)
}

// ProductStatistics mocks base method
func (m *MockUrbsSettingInterface) ProductStatistics(ctx context.Context, product string) (*tpl.ProductStatisticsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductStatistics", ctx, product)
	ret0, _ := ret[0].(*tpl.ProductStatisticsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductStatistics indicates an expected call of ProductStatistics
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductStatistics(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductStatistics", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductStatistics), ctx, product)
}

// ProductCreate mocks base method
func (m *MockUrbsSettingInterface) ProductCreate(ctx context.Context, body *tpl.NameDescBody) (*tpl.ProductRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductCreate", ctx, body)
	ret0, _ := ret[0].(*tpl.ProductRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductCreate indicates an expected call of ProductCreate
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductCreate(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductCreate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductCreate), ctx, body)
}

// ProductUpdate mocks base method
func (m *MockUrbsSettingInterface) ProductUpdate(ctx context.Context, product string, body *tpl.ProductUpdateBody) (*tpl.ProductRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductUpdate", ctx, product, body)
	ret0, _ := ret[0].(*tpl.ProductRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductUpdate indicates an expected call of ProductUpdate
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductUpdate(ctx, product, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductUpdate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductUpdate), ctx, product, body)
}

// ProductOffline mocks base method
func (m *MockUrbsSettingInterface) ProductOffline(ctx context.Context, product string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductOffline", ctx, product)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductOffline indicates an expected call of ProductOffline
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductOffline(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductOffline", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductOffline), ctx, product)
}

// ProductDelete mocks base method
func (m *MockUrbsSettingInterface) ProductDelete(ctx context.Context, product string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductDelete", ctx, product)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductDelete indicates an expected call of ProductDelete
func (mr *MockUrbsSettingInterfaceMockRecorder) ProductDelete(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDelete", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ProductDelete), ctx, product)
}

// ModuleList mocks base method
func (m *MockUrbsSettingInterface) ModuleList(ctx context.Context, args *tpl.ProductPaginationURL) (*tpl.ModulesInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleList", ctx, args)
	ret0, _ := ret[0].(*tpl.ModulesInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleList indicates an expected call of ModuleList
func (mr *MockUrbsSettingInterfaceMockRecorder) ModuleList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ModuleList), ctx, args)
}

// ModuleCreate mocks base method
func (m *MockUrbsSettingInterface) ModuleCreate(ctx context.Context, product string, body *tpl.NameDescBody) (*tpl.ModuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleCreate", ctx, product, body)
	ret0, _ := ret[0].(*tpl.ModuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleCreate indicates an expected call of ModuleCreate
func (mr *MockUrbsSettingInterfaceMockRecorder) ModuleCreate(ctx, product, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleCreate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ModuleCreate), ctx, product, body)
}

// ModuleUpdate mocks base method
func (m *MockUrbsSettingInterface) ModuleUpdate(ctx context.Context, product, module string, body *tpl.ModuleUpdateBody) (*tpl.ModuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleUpdate", ctx, product, module, body)
	ret0, _ := ret[0].(*tpl.ModuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleUpdate indicates an expected call of ModuleUpdate
func (mr *MockUrbsSettingInterfaceMockRecorder) ModuleUpdate(ctx, product, module, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleUpdate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ModuleUpdate), ctx, product, module, body)
}

// ModuleOffline mocks base method
func (m *MockUrbsSettingInterface) ModuleOffline(ctx context.Context, product, module string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleOffline", ctx, product, module)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleOffline indicates an expected call of ModuleOffline
func (mr *MockUrbsSettingInterfaceMockRecorder) ModuleOffline(ctx, product, module interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleOffline", reflect.TypeOf((*MockUrbsSettingInterface)(nil).ModuleOffline), ctx, product, module)
}

// SettingListByProduct mocks base method
func (m *MockUrbsSettingInterface) SettingListByProduct(ctx context.Context, args *tpl.ProductPaginationURL) (*tpl.SettingsInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingListByProduct", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingsInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingListByProduct indicates an expected call of SettingListByProduct
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingListByProduct(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingListByProduct", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingListByProduct), ctx, args)
}

// SettingList mocks base method
func (m *MockUrbsSettingInterface) SettingList(ctx context.Context, args *tpl.ProductModuleURL) (*tpl.SettingsInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingList", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingsInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingList indicates an expected call of SettingList
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingList), ctx, args)
}

// SettingListUsers mocks base method
func (m *MockUrbsSettingInterface) SettingListUsers(ctx context.Context, args *tpl.ProductModuleSettingURL) (*tpl.SettingUsersInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingListUsers", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingUsersInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingListUsers indicates an expected call of SettingListUsers
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingListUsers(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingListUsers", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingListUsers), ctx, args)
}

// SettingListGroups mocks base method
func (m *MockUrbsSettingInterface) SettingListGroups(ctx context.Context, args *tpl.ProductModuleSettingURL) (*tpl.SettingGroupsInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingListGroups", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingGroupsInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingListGroups indicates an expected call of SettingListGroups
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingListGroups(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingListGroups", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingListGroups), ctx, args)
}

// SettingCreate mocks base method
func (m *MockUrbsSettingInterface) SettingCreate(ctx context.Context, args *tpl.ProductModuleURL, body *tpl.SettingBody) (*tpl.SettingInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingCreate", ctx, args, body)
	ret0, _ := ret[0].(*tpl.SettingInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingCreate indicates an expected call of SettingCreate
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingCreate(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingCreate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingCreate), ctx, args, body)
}

// SettingCreateRule mocks base method
func (m *MockUrbsSettingInterface) SettingCreateRule(ctx context.Context, args *tpl.ProductModuleSettingURL, body *tpl.SettingRuleBody) (*tpl.SettingRuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingCreateRule", ctx, args, body)
	ret0, _ := ret[0].(*tpl.SettingRuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingCreateRule indicates an expected call of SettingCreateRule
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingCreateRule(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingCreateRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingCreateRule), ctx, args, body)
}

// SettingListRule mocks base method
func (m *MockUrbsSettingInterface) SettingListRule(ctx context.Context, args *tpl.ProductModuleSettingURL) (*tpl.SettingRulesInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingListRule", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingRulesInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingListRule indicates an expected call of SettingListRule
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingListRule(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingListRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingListRule), ctx, args)
}

// SettingUpdateRule mocks base method
func (m *MockUrbsSettingInterface) SettingUpdateRule(ctx context.Context, args *tpl.ProductModuleSettingHIDURL, body *tpl.SettingRuleBody) (*tpl.SettingRuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingUpdateRule", ctx, args, body)
	ret0, _ := ret[0].(*tpl.SettingRuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingUpdateRule indicates an expected call of SettingUpdateRule
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingUpdateRule(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingUpdateRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingUpdateRule), ctx, args, body)
}

// SettingDeleteRule mocks base method
func (m *MockUrbsSettingInterface) SettingDeleteRule(ctx context.Context, args *tpl.ProductModuleSettingHIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingDeleteRule", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingDeleteRule indicates an expected call of SettingDeleteRule
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingDeleteRule(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingDeleteRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingDeleteRule), ctx, args)
}

// SettingGet mocks base method
func (m *MockUrbsSettingInterface) SettingGet(ctx context.Context, args *tpl.ProductModuleSettingURL) (*tpl.SettingInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingGet", ctx, args)
	ret0, _ := ret[0].(*tpl.SettingInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingGet indicates an expected call of SettingGet
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingGet(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingGet", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingGet), ctx, args)
}

// SettingUpdate mocks base method
func (m *MockUrbsSettingInterface) SettingUpdate(ctx context.Context, args *tpl.ProductModuleSettingURL, body *tpl.SettingUpdateBody) (*tpl.SettingInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingUpdate", ctx, args, body)
	ret0, _ := ret[0].(*tpl.SettingInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingUpdate indicates an expected call of SettingUpdate
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingUpdate(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingUpdate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingUpdate), ctx, args, body)
}

// SettingOffline mocks base method
func (m *MockUrbsSettingInterface) SettingOffline(ctx context.Context, args *tpl.ProductModuleSettingURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingOffline", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingOffline indicates an expected call of SettingOffline
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingOffline(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingOffline", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingOffline), ctx, args)
}

// SettingAssign mocks base method
func (m *MockUrbsSettingInterface) SettingAssign(ctx context.Context, args *tpl.ProductModuleSettingURL, body *tpl.UsersGroupsBody) (*tpl.SettingReleaseInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingAssign", ctx, args, body)
	ret0, _ := ret[0].(*tpl.SettingReleaseInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingAssign indicates an expected call of SettingAssign
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingAssign(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingAssign", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingAssign), ctx, args, body)
}

// SettingRecall mocks base method
func (m *MockUrbsSettingInterface) SettingRecall(ctx context.Context, args *tpl.ProductModuleSettingURL, body *tpl.RecallBody) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingRecall", ctx, args, body)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingRecall indicates an expected call of SettingRecall
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingRecall(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingRecall", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingRecall), ctx, args, body)
}

// SettingDeleteUser mocks base method
func (m *MockUrbsSettingInterface) SettingDeleteUser(ctx context.Context, args *tpl.ProductModuleSettingUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingDeleteUser", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingDeleteUser indicates an expected call of SettingDeleteUser
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingDeleteUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingDeleteUser", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingDeleteUser), ctx, args)
}

// SettingRollbackUserSetting mocks base method
func (m *MockUrbsSettingInterface) SettingRollbackUserSetting(ctx context.Context, args *tpl.ProductModuleSettingUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingRollbackUserSetting", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingRollbackUserSetting indicates an expected call of SettingRollbackUserSetting
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingRollbackUserSetting(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingRollbackUserSetting", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingRollbackUserSetting), ctx, args)
}

// SettingDeleteGroup mocks base method
func (m *MockUrbsSettingInterface) SettingDeleteGroup(ctx context.Context, args *tpl.ProductModuleSettingUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingDeleteGroup", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingDeleteGroup indicates an expected call of SettingDeleteGroup
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingDeleteGroup(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingDeleteGroup", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingDeleteGroup), ctx, args)
}

// SettingRollbackGroupSetting mocks base method
func (m *MockUrbsSettingInterface) SettingRollbackGroupSetting(ctx context.Context, args *tpl.ProductModuleSettingUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingRollbackGroupSetting", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingRollbackGroupSetting indicates an expected call of SettingRollbackGroupSetting
func (mr *MockUrbsSettingInterfaceMockRecorder) SettingRollbackGroupSetting(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingRollbackGroupSetting", reflect.TypeOf((*MockUrbsSettingInterface)(nil).SettingRollbackGroupSetting), ctx, args)
}

// LabelList mocks base method
func (m *MockUrbsSettingInterface) LabelList(ctx context.Context, args *tpl.ProductPaginationURL) (*tpl.LabelsInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelList", ctx, args)
	ret0, _ := ret[0].(*tpl.LabelsInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelList indicates an expected call of LabelList
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelList), ctx, args)
}

// LabelListUsers mocks base method
func (m *MockUrbsSettingInterface) LabelListUsers(ctx context.Context, args *tpl.ProductLabelURL) (*tpl.LabelUsersInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelListUsers", ctx, args)
	ret0, _ := ret[0].(*tpl.LabelUsersInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelListUsers indicates an expected call of LabelListUsers
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelListUsers(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelListUsers", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelListUsers), ctx, args)
}

// LabelListGroups mocks base method
func (m *MockUrbsSettingInterface) LabelListGroups(ctx context.Context, args *tpl.ProductLabelURL) (*tpl.LabelGroupsInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelListGroups", ctx, args)
	ret0, _ := ret[0].(*tpl.LabelGroupsInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelListGroups indicates an expected call of LabelListGroups
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelListGroups(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelListGroups", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelListGroups), ctx, args)
}

// LabelCreate mocks base method
func (m *MockUrbsSettingInterface) LabelCreate(ctx context.Context, product string, body *tpl.LabelBody) (*tpl.LabelInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelCreate", ctx, product, body)
	ret0, _ := ret[0].(*tpl.LabelInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelCreate indicates an expected call of LabelCreate
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelCreate(ctx, product, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelCreate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelCreate), ctx, product, body)
}

// LabelCreateRule mocks base method
func (m *MockUrbsSettingInterface) LabelCreateRule(ctx context.Context, args *tpl.ProductLabelURL, body *tpl.LabelRuleBody) (*tpl.LabelRuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelCreateRule", ctx, args, body)
	ret0, _ := ret[0].(*tpl.LabelRuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelCreateRule indicates an expected call of LabelCreateRule
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelCreateRule(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelCreateRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelCreateRule), ctx, args, body)
}

// LabelListRule mocks base method
func (m *MockUrbsSettingInterface) LabelListRule(ctx context.Context, args *tpl.ProductLabelURL) (*tpl.LabelRulesInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelListRule", ctx, args)
	ret0, _ := ret[0].(*tpl.LabelRulesInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelListRule indicates an expected call of LabelListRule
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelListRule(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelListRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelListRule), ctx, args)
}

// LabelUpdateRule mocks base method
func (m *MockUrbsSettingInterface) LabelUpdateRule(ctx context.Context, args *tpl.ProductLabelHIDURL, body *tpl.LabelRuleBody) (*tpl.LabelRuleInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelUpdateRule", ctx, args, body)
	ret0, _ := ret[0].(*tpl.LabelRuleInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelUpdateRule indicates an expected call of LabelUpdateRule
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelUpdateRule(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelUpdateRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelUpdateRule), ctx, args, body)
}

// LabelDeleteRule mocks base method
func (m *MockUrbsSettingInterface) LabelDeleteRule(ctx context.Context, args *tpl.ProductLabelHIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelDeleteRule", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelDeleteRule indicates an expected call of LabelDeleteRule
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelDeleteRule(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelDeleteRule", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelDeleteRule), ctx, args)
}

// LabelUpdate mocks base method
func (m *MockUrbsSettingInterface) LabelUpdate(ctx context.Context, product, label string, body *tpl.LabelUpdateBody) (*tpl.LabelInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelUpdate", ctx, product, label, body)
	ret0, _ := ret[0].(*tpl.LabelInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelUpdate indicates an expected call of LabelUpdate
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelUpdate(ctx, product, label, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelUpdate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelUpdate), ctx, product, label, body)
}

// LabelDelete mocks base method
func (m *MockUrbsSettingInterface) LabelDelete(ctx context.Context, product, label string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelDelete", ctx, product, label)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelDelete indicates an expected call of LabelDelete
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelDelete(ctx, product, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelDelete", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelDelete), ctx, product, label)
}

// LabelOffline mocks base method
func (m *MockUrbsSettingInterface) LabelOffline(ctx context.Context, product, label string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelOffline", ctx, product, label)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelOffline indicates an expected call of LabelOffline
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelOffline(ctx, product, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelOffline", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelOffline), ctx, product, label)
}

// LabelAssign mocks base method
func (m *MockUrbsSettingInterface) LabelAssign(ctx context.Context, product, label string, body *tpl.UsersGroupsBody) (*tpl.LabelReleaseInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelAssign", ctx, product, label, body)
	ret0, _ := ret[0].(*tpl.LabelReleaseInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelAssign indicates an expected call of LabelAssign
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelAssign(ctx, product, label, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelAssign", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelAssign), ctx, product, label, body)
}

// LabelRecall mocks base method
func (m *MockUrbsSettingInterface) LabelRecall(ctx context.Context, args *tpl.ProductLabelURL, body *tpl.RecallBody) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelRecall", ctx, args, body)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelRecall indicates an expected call of LabelRecall
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelRecall(ctx, args, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelRecall", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelRecall), ctx, args, body)
}

// LabelDeleteUser mocks base method
func (m *MockUrbsSettingInterface) LabelDeleteUser(ctx context.Context, args *tpl.ProductLabelUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelDeleteUser", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelDeleteUser indicates an expected call of LabelDeleteUser
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelDeleteUser(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelDeleteUser", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelDeleteUser), ctx, args)
}

// LabelDeleteGroup mocks base method
func (m *MockUrbsSettingInterface) LabelDeleteGroup(ctx context.Context, args *tpl.ProductLabelUIDURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelDeleteGroup", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelDeleteGroup indicates an expected call of LabelDeleteGroup
func (mr *MockUrbsSettingInterfaceMockRecorder) LabelDeleteGroup(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelDeleteGroup", reflect.TypeOf((*MockUrbsSettingInterface)(nil).LabelDeleteGroup), ctx, args)
}

// UserList mocks base method
func (m *MockUrbsSettingInterface) UserList(ctx context.Context, args *tpl.Pagination) (*tpl.UsersRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", ctx, args)
	ret0, _ := ret[0].(*tpl.UsersRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList
func (mr *MockUrbsSettingInterfaceMockRecorder) UserList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserList), ctx, args)
}

// UserListLables mocks base method
func (m *MockUrbsSettingInterface) UserListLables(ctx context.Context, args *tpl.UIDPaginationURL) (*tpl.MyLabelsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListLables", ctx, args)
	ret0, _ := ret[0].(*tpl.MyLabelsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserListLables indicates an expected call of UserListLables
func (mr *MockUrbsSettingInterfaceMockRecorder) UserListLables(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListLables", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserListLables), ctx, args)
}

// UserRefreshCached mocks base method
func (m *MockUrbsSettingInterface) UserRefreshCached(ctx context.Context, uid string) (*tpl.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRefreshCached", ctx, uid)
	ret0, _ := ret[0].(*tpl.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRefreshCached indicates an expected call of UserRefreshCached
func (mr *MockUrbsSettingInterfaceMockRecorder) UserRefreshCached(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRefreshCached", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserRefreshCached), ctx, uid)
}

// UserListSettings mocks base method
func (m *MockUrbsSettingInterface) UserListSettings(ctx context.Context, args *tpl.UIDPaginationURL) (*tpl.MySettingsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListSettings", ctx, args)
	ret0, _ := ret[0].(*tpl.MySettingsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserListSettings indicates an expected call of UserListSettings
func (mr *MockUrbsSettingInterfaceMockRecorder) UserListSettings(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListSettings", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserListSettings), ctx, args)
}

// UserListSettingsUnionAll mocks base method
func (m *MockUrbsSettingInterface) UserListSettingsUnionAll(ctx context.Context, args *tpl.MySettingsQueryURL) (*tpl.MySettingsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListSettingsUnionAll", ctx, args)
	ret0, _ := ret[0].(*tpl.MySettingsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserListSettingsUnionAll indicates an expected call of UserListSettingsUnionAll
func (mr *MockUrbsSettingInterfaceMockRecorder) UserListSettingsUnionAll(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListSettingsUnionAll", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserListSettingsUnionAll), ctx, args)
}

// UserCheckExists mocks base method
func (m *MockUrbsSettingInterface) UserCheckExists(ctx context.Context, uid string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCheckExists", ctx, uid)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCheckExists indicates an expected call of UserCheckExists
func (mr *MockUrbsSettingInterfaceMockRecorder) UserCheckExists(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCheckExists", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserCheckExists), ctx, uid)
}

// UserBatchAdd mocks base method
func (m *MockUrbsSettingInterface) UserBatchAdd(ctx context.Context, users []string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBatchAdd", ctx, users)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBatchAdd indicates an expected call of UserBatchAdd
func (mr *MockUrbsSettingInterfaceMockRecorder) UserBatchAdd(ctx, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBatchAdd", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserBatchAdd), ctx, users)
}

// GroupListLables mocks base method
func (m *MockUrbsSettingInterface) GroupListLables(ctx context.Context, args *tpl.UIDPaginationURL) (*tpl.MyLabelsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupListLables", ctx, args)
	ret0, _ := ret[0].(*tpl.MyLabelsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupListLables indicates an expected call of GroupListLables
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupListLables(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupListLables", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupListLables), ctx, args)
}

// GroupListSettings mocks base method
func (m *MockUrbsSettingInterface) GroupListSettings(ctx context.Context, args *tpl.MySettingsQueryURL) (*tpl.MySettingsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupListSettings", ctx, args)
	ret0, _ := ret[0].(*tpl.MySettingsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupListSettings indicates an expected call of GroupListSettings
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupListSettings(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupListSettings", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupListSettings), ctx, args)
}

// GroupList mocks base method
func (m *MockUrbsSettingInterface) GroupList(ctx context.Context, args *tpl.GroupsURL) (*tpl.GroupsRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupList", ctx, args)
	ret0, _ := ret[0].(*tpl.GroupsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupList indicates an expected call of GroupList
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupList(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupList", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupList), ctx, args)
}

// GroupCheckExists mocks base method
func (m *MockUrbsSettingInterface) GroupCheckExists(ctx context.Context, uid string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCheckExists", ctx, uid)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCheckExists indicates an expected call of GroupCheckExists
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupCheckExists(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCheckExists", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupCheckExists), ctx, uid)
}

// GroupBatchAdd mocks base method
func (m *MockUrbsSettingInterface) GroupBatchAdd(ctx context.Context, groups []tpl.GroupBody) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBatchAdd", ctx, groups)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupBatchAdd indicates an expected call of GroupBatchAdd
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupBatchAdd(ctx, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBatchAdd", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupBatchAdd), ctx, groups)
}

// GroupUpdate mocks base method
func (m *MockUrbsSettingInterface) GroupUpdate(ctx context.Context, uid string, body *urbssetting.GroupUpdateBody) (*tpl.GroupRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUpdate", ctx, uid, body)
	ret0, _ := ret[0].(*tpl.GroupRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupUpdate indicates an expected call of GroupUpdate
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupUpdate(ctx, uid, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUpdate", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupUpdate), ctx, uid, body)
}

// GroupDelete mocks base method
func (m *MockUrbsSettingInterface) GroupDelete(ctx context.Context, uid string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", ctx, uid)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupDelete indicates an expected call of GroupDelete
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupDelete(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupDelete), ctx, uid)
}

// GroupListMembers mocks base method
func (m *MockUrbsSettingInterface) GroupListMembers(ctx context.Context, args *tpl.UIDPaginationURL) (*tpl.GroupMembersRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupListMembers", ctx, args)
	ret0, _ := ret[0].(*tpl.GroupMembersRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupListMembers indicates an expected call of GroupListMembers
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupListMembers(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupListMembers", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupListMembers), ctx, args)
}

// GroupBatchAddMembers mocks base method
func (m *MockUrbsSettingInterface) GroupBatchAddMembers(ctx context.Context, groupId string, users []string) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBatchAddMembers", ctx, groupId, users)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupBatchAddMembers indicates an expected call of GroupBatchAddMembers
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupBatchAddMembers(ctx, groupId, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBatchAddMembers", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupBatchAddMembers), ctx, groupId, users)
}

// GroupRemoveMembers mocks base method
func (m *MockUrbsSettingInterface) GroupRemoveMembers(ctx context.Context, args *tpl.GroupMembersURL) (*tpl.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveMembers", ctx, args)
	ret0, _ := ret[0].(*tpl.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupRemoveMembers indicates an expected call of GroupRemoveMembers
func (mr *MockUrbsSettingInterfaceMockRecorder) GroupRemoveMembers(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveMembers", reflect.TypeOf((*MockUrbsSettingInterface)(nil).GroupRemoveMembers), ctx, args)
}
