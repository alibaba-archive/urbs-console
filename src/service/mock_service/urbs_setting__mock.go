// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/service/urbs_setting_interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	urbssetting "github.com/teambition/urbs-console/src/dto/urbssetting"
	reflect "reflect"
)

// MockUrbsSettingInterface is a mock of UrbsSettingInterface interface
type MockUrbsSettingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUrbsSettingInterfaceMockRecorder
}

// MockUrbsSettingInterfaceMockRecorder is the mock recorder for MockUrbsSettingInterface
type MockUrbsSettingInterfaceMockRecorder struct {
	mock *MockUrbsSettingInterface
}

// NewMockUrbsSettingInterface creates a new mock instance
func NewMockUrbsSettingInterface(ctrl *gomock.Controller) *MockUrbsSettingInterface {
	mock := &MockUrbsSettingInterface{ctrl: ctrl}
	mock.recorder = &MockUrbsSettingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUrbsSettingInterface) EXPECT() *MockUrbsSettingInterfaceMockRecorder {
	return m.recorder
}

// UserBatchAdd mocks base method
func (m *MockUrbsSettingInterface) UserBatchAdd(ctx context.Context, users []string) (*urbssetting.BoolRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBatchAdd", ctx, users)
	ret0, _ := ret[0].(*urbssetting.BoolRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBatchAdd indicates an expected call of UserBatchAdd
func (mr *MockUrbsSettingInterfaceMockRecorder) UserBatchAdd(ctx, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBatchAdd", reflect.TypeOf((*MockUrbsSettingInterface)(nil).UserBatchAdd), ctx, users)
}
